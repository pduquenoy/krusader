0001    0002    ; this version for the integrated macroassembler, simulator and debugger for0003    ; 650x microprocessor family by Michal Kowalski http://home.pacbell.net/michal_k/0004    0005    ; additions and changes by Lee Davison http://members.lycos.co.uk/leeedavison/0006    ; from suggested ASCII routines in the KIM MicroChess programmers notes0007    0008    ; this version is posted with the permission of Peter Jennings, peterj@benlo.com0009    0010    ; display flash during compute move replaced by '?' PROMPT flash0011    ; piece display changed to display piece at 'to' square after each move0012    0013    ; Simulator I/O base addresse is $F0000014    ; Simulator window size is 64 columns x 20 rows0015    0016    ;0017    ; Additional code by Lee Davidson, Darryl Richter and Ken Wessen0018    ; Source formatted for KRUSADER - the Replica 1 Assembler0019    0020    ;  Start a new game by running from location $10000021    ;  Resume a game by running from location $10090022    0023      0000             APPLE1 = 00024    0025    ; Constants0026    0027      0008             BS	= $08		; backspace0028      0020             SP	= $20		; space0029      000D             CR	= $0D		; carriage return0030      000A             LF	= $0A		; line feed0031      001B             ESC	= $1B		; escape0032      007F             INMASK  = $7F0033    0034    ; page zero variables0035    0036      0040             MNUCNT		= $400037      0041             MENUL		= $410038      0042             MENUH		= $420039      0043             POPENL		= $430040      0044             POPENH		= $440041    0042      004B             DIS1		= $4B0043      004A             DIS2		= $4A0044      0049             DIS3		= $490045      004B             BESTP		= DIS10046      004A             BESTV		= DIS20047      0049             BESTM		= DIS30048    0049      004C             PROMPT		= $4C			; PROMPT character, '?' or ' "0050      004D             REVRSE		= $4D			; which way round is the display board0051      004E             COMPW		= $4E0052    0053      0050             BOARD		= $500054      0060             BK		= $600055      00B0             PIECE		= $B00056      00B1             SQUARE		= $B10057      00B2             SP2		= $B20058      00B3             SP1		= $B30059      00B4             INCHEK		= $B40060      00B5             STATE		= $B50061      00B6             MOVEN		= $B60062      00DC             OMOVE		= $DC0063      00DD             WCAP0		= $DD0064      00DE             COUNT		= $DE0065      00DE             BCAP2		= $DE0066      00DF             WCAP2		= $DF0067      00E0             BCAP1		= $E00068      00E1             WCAP1		= $E10069      00E2             BCAP0		= $E20070      00E3             MOB		= $E30071      00E4             MAXC		= $E40072      00E5             CC		= $E50073      00E6             PCAP		= $E60074      00E3             BMOB		= $E30075      00E4             BMAXC		= $E40076      00E5             XBCC		= $E5 			; was BCC0077      00E6             BMAXP		= $E60078      00E8             XMAXC		= $E80079      00EB             WMOB		= $EB0080      00EC             WMAXC		= $EC0081      00ED             WCC		= $ED0082      00EE             WMAXP		= $EE0083      00EF             PMOB		= $EF0084      00F0             PMAXC		= $F00085      00F1             PCC		= $F10086      00F2             PCP		= $F20087      00F3             OLDKY		= $F30088    		0089    1000               		*=$1000			; load into RAM @ $1000 onwards0090    0091    START	0092    1000  20 B8 15     	JSR	PRNTC		; print copyright0093    1003  20 F4 16     	JSR 	INIT0094    1006  20 79 10     	JSR 	SETBRD0095    1009  A5 4E        	LDA 	COMPW0096    100B  29 01        	AND	#$010097    100D  F0 02        	BEQ	.SKIP		; COMPUTER IS PLAYING WHITE0098    100F  D0 26        	BNE	DOREV	0099    1011  A9 CC        .SKIP	LDA	#$CC	0100    1013  85 49        	STA	DIS3		; Display CCC0101    CHESS0102    1015  D8           	CLD				; INITIALIZE0103    1016  A2 FF        	LDX	#$FF			; TWO STACKS0104    1018  9A           	TXS	0105    1019  A2 C8        	LDX	#$C80106    101B  86 B2        	STX	SP20107    0108    ;	ROUTINES TO LIGHT LED0109    ;	DISPLAY AqND GET KEY0110    ;	FROM KEYBOARD0111    0112    101D  20 0E 15     OUT	JSR	DRWBRD		; draw board0113    1020  A9 3F        	LDA	#'?'			; PROMPT character0114    1022  85 4C        	STA	PROMPT			; save it0115    1024  20 EB 14     GETKEY	JSR	UPDDSP		; update PROMPT & display0116    1027  20 FE 18     	JSR	GETCH			; get key press0117    0118    102A  C9 43        	CMP	#'C'			; is it 'C"0119    102C  D0 05        	BNE	NOSET			; branch if not0120    0121    102E  20 79 10     	JSR 	SETBRD			; else set up board0122    1031  D0 22        	BNE	CLDSP			; always branches0123    0124    1033  C9 45        NOSET	CMP	#'E'			; [E]0125    1035  D0 0D        	BNE	NOREV			; REVRSE0126    0127    1037  20 13 13     DOREV	JSR	REV			0128    0129    103A  A5 4D        	LDA	REVRSE			; get REVRSEd flag0130    103C  49 01        	EOR	#$01			; toggle REVRSE bit0131    103E  85 4D        	STA	REVRSE			; save flag0132    0133    1040  A9 EE        	LDA	#$EE			; IS0134    1042  D0 11        	BNE	CLDSP0135    0136    1044  C9 44        NOREV	CMP	#'D'			; [D]0137    1046  D0 03        	BNE	NODISP			; REDRAW BOARD0138    0139    1048  4C 15 10     	JMP	CHESS0140    0141    104B  C9 50        NODISP	CMP	#'P'			; [P]0142    104D  D0 0E        	BNE	NOGO			; PLAY CHESS0143    0144    104F  20 F4 18     	JSR	CRLF0145    1052  20 26 14     	JSR	GO0146    1055  85 4B        CLDSP	STA	DIS1			; DISPLAY0147    	;LDA	#$000148    1057  85 4A        	STA	DIS2			; ACROSS0149    1059  85 49        	STA	DIS3			; DISPLAY0150    	;BEQ	CHESS0151    105B  D0 B8        	BNE	CHESS0152    0153    105D  C9 0D        NOGO	CMP	#$0D			; [Enter]0154    105F  D0 0E        	BNE	NOMV			; MOVE MAN0155    0156    1061  A5 49        	LDA 	DIS30157    1063  20 CC 15     	JSR 	PRTAKE0158    1066  20 AD 13     	JSR	MOVE			; AS ENTERED0159    ;	JSR	DISP2			; piece into display0160    1069  20 4C 12     	JSR	DISP3			; piece into display0161    106C  4C 15 10     	JMP	CHESS			; main loop0162    0163    106F  C9 51        NOMV	CMP	#'Q'			; [Q] ***Added to allow game exit***0164    1071  F0 03        	BEQ	DONE			; quit the game, exit back to system.0165    0166    1073  4C 3C 12     	JMP	INPUT			; process move0167    1076  4C 1F FF     DONE	JMP	$FF1F		; *** MUST set this to YOUR OS starting address0168    0169    1079  A2 1F        SETBRD	LDX	#$1F			; 32 pieces to do0170    107B  BD AE 18     WHSET	LDA	SETW,X			; FROM0171    107E  95 50        	STA	BOARD,X			; SETW0172    1080  CA           	DEX	0173    1081  10 F8        	BPL	WHSET0174    0175    1083  A9 00        	LDA	#$00			; no REVRSE0176    1085  85 4D        	STA	REVRSE			; set it0177    0178    1087  A2 1B        	LDX	#$1B			; *ADDED0179    1089  86 DC        	STX	OMOVE			; INITS TO $FF0180    108B  A9 CC        	LDA	#$CC			; Display CCC0181    108D  60           	RTS0182    	0183      000A             NUMOPN = $0A0184      001C             OPENSZ = $1C0185     0186    OPENGS0187    FDW 	.byte $990188    	.byte $220189    	.byte $060190    	.byte $450191    	.byte $320192    	.byte $0C0193    	.byte $720194    	.byte $140195     	.byte $010196    	.byte $630197    	.byte $630198    	.byte $050199    	.byte $640200    	.byte $430201    	.byte $0F0202    	.byte $630203     	.byte $410204    	.byte $050205    	.byte $520206    	.byte $250207    	.byte $070208    	.byte $440209    	.byte $340210    	.byte $0E0211     	.byte $530212    	.byte $330213    	.byte $0F0214    	.byte $CC0215    FDB	.byte $990216    	.byte $220217    	.byte $070218    	.byte $550219     	.byte $320220    	.byte $0D0221    	.byte $450222    	.byte $060223    	.byte $000224    	.byte $630225    	.byte $140226    	.byte $010227     	.byte $140228    	.byte $130229    	.byte $060230    	.byte $340231    	.byte $140232    	.byte $040233    	.byte $360234    	.byte $250235     	.byte $060236    	.byte $520237    	.byte $330238    	.byte $0E0239    	.byte $430240    	.byte $240241    	.byte $0F0242    	.byte $440243    GPW	.byte $990244    	.byte $250245    	.byte $0B0246    	.byte $250247    	.byte $010248    	.byte $000249    	.byte $330250    	.byte $250251     	.byte $070252    	.byte $360253    	.byte $340254    	.byte $0D0255    	.byte $340256    	.byte $340257    	.byte $0E0258    	.byte $520259     	.byte $250260    	.byte $0D0261    	.byte $450262    	.byte $350263    	.byte $040264    	.byte $550265    	.byte $220266    	.byte $060267     	.byte $430268    	.byte $330269    	.byte $0F0270    	.byte $CC0271    GPB	.byte $990272    	.byte $520273    	.byte $040274    	.byte $520275     	.byte $520276    	.byte $060277    	.byte $750278    	.byte $440279    	.byte $060280    	.byte $520281    	.byte $410282    	.byte $040283     	.byte $430284    	.byte $430285    	.byte $0F0286    	.byte $430287    	.byte $250288    	.byte $060289    	.byte $520290    	.byte $320291     	.byte $040292    	.byte $420293    	.byte $220294    	.byte $070295    	.byte $550296    	.byte $340297    	.byte $0F0298    	.byte $440299    RLW	.byte $990300    	.byte $250301    	.byte $070302    	.byte $660303    	.byte $430304    	.byte $0E0305    	.byte $550306    	.byte $550307     	.byte $040308    	.byte $540309    	.byte $130310    	.byte $010311    	.byte $630312    	.byte $340313    	.byte $0E0314    	.byte $330315     	.byte $010316    	.byte $000317    	.byte $520318    	.byte $460319    	.byte $040320    	.byte $550321    	.byte $220322    	.byte $060323     	.byte $430324    	.byte $330325    	.byte $0F0326    	.byte $CC0327    RLB	.byte $990328    	.byte $060329    	.byte $000330    	.byte $520331     	.byte $110332    	.byte $060333    	.byte $340334    	.byte $220335    	.byte $0B0336    	.byte $220337    	.byte $230338    	.byte $060339     	.byte $640340    	.byte $140341    	.byte $040342    	.byte $430343    	.byte $440344    	.byte $060345    	.byte $750346    	.byte $250347     	.byte $060348    	.byte $310349    	.byte $220350    	.byte $070351    	.byte $550352    	.byte $340353    	.byte $0F0354    	.byte $440355    QIW	.byte $990356    	.byte $250357    	.byte $010358    	.byte $250359    	.byte $150360    	.byte $010361    	.byte $330362    	.byte $250363     	.byte $070364    	.byte $720365    	.byte $010366    	.byte $000367    	.byte $630368    	.byte $110369    	.byte $040370    	.byte $660371     	.byte $210372    	.byte $0A0373    	.byte $560374    	.byte $220375    	.byte $060376    	.byte $530377    	.byte $350378    	.byte $0D0379     	.byte $520380    	.byte $340381    	.byte $0E0382    	.byte $CC0383    QIB	.byte $990384    	.byte $350385    	.byte $0C0386    	.byte $520387     	.byte $520388    	.byte $060389    	.byte $620390    	.byte $440391    	.byte $060392    	.byte $520393    	.byte $060394    	.byte $000395     	.byte $750396    	.byte $140397    	.byte $040398    	.byte $660399    	.byte $110400    	.byte $050401    	.byte $560402    	.byte $210403     	.byte $0B0404    	.byte $550405    	.byte $240406    	.byte $0F0407    	.byte $420408    	.byte $250409    	.byte $060410    	.byte $430411    FKW	.byte $990412    	.byte $030413    	.byte $020414    	.byte $630415    	.byte $250416    	.byte $0B0417    	.byte $250418    	.byte $410419     	.byte $050420    	.byte $540421    	.byte $240422    	.byte $0E0423    	.byte $720424    	.byte $010425    	.byte $000426    	.byte $360427     	.byte $460428    	.byte $040429    	.byte $520430    	.byte $250431    	.byte $070432    	.byte $550433    	.byte $220434    	.byte $060435     	.byte $430436    	.byte $330437    	.byte $0F0438    	.byte $CC0439    FKB	.byte $990440    	.byte $030441    	.byte $070442    	.byte $740443     	.byte $140444    	.byte $010445    	.byte $520446    	.byte $520447    	.byte $040448    	.byte $360449    	.byte $230450    	.byte $0E0451     	.byte $530452    	.byte $060453    	.byte $000454    	.byte $750455    	.byte $410456    	.byte $040457    	.byte $310458    	.byte $250459     	.byte $060460    	.byte $520461    	.byte $220462    	.byte $070463    	.byte $550464    	.byte $340465    	.byte $0F0466    	.byte $440467    0468    ;	THE ROUTINE JANUS DIRECTS THE0469    ;	ANALYSIS BY DETERMINING WHAT0470    ;	SHOULD OCCUR AFTER EACH MOVE0471    ;	GENERATED BY GNM0472    0473    JANUS0474    11A6  A6 B5        	LDX	STATE0475    11A8  30 5C        	BMI	NOCNT0476    0477    ;	THIS ROUTINE COUNTS OCCURRENCES0478    ;	IT DEPENDS UPON STATE TO INDEX0479    ;	THE CORRECT COUNTERS0480    0481    11AA  A5 B0        COUNTS	LDA	PIECE0482    11AC  F0 08        	BEQ	OVER			; IF STATE=80483    11AE  E0 08        	CPX 	#$08			; DO NOT COUNT0484    11B0  D0 04        	BNE	OVER			; BLK MAX CAP0485    11B2  C5 E6        	CMP	BMAXP			; MOVES FOR0486    11B4  F0 2E        	BEQ	XRT			; WHITE0487    0488    11B6  F6 E3        OVER	INC	MOB,X			; MOBILITY0489    11B8  C9 01        	CMP 	#$01			;	+ QUEEN0490    11BA  D0 02        	BNE	NOQ			; FOR TWO0491    11BC  F6 E3        	INC	MOB,X0492    0493    11BE  50 1E        NOQ	BVC	NOCAP0494    11C0  A0 0F        	LDY	#$0F			; CALCULATE0495    11C2  A5 B1        	LDA	SQUARE			; POINTS0496    11C4  D9 60 00     ELOOP	CMP	BK,Y			; CAPTURED0497    11C7  F0 03        	BEQ	FOUN			; BY THIS0498    11C9  88           	DEY				; MOVE0499    11CA  10 F8        	BPL	ELOOP0500    11CC  B9 DF 18     FOUN	LDA	POINTS,Y0501    11CF  D5 E4        	CMP	MAXC,X0502    11D1  90 04        	BCC	LESS			; SAVE IF0503    11D3  94 E6        	STY	PCAP,X			; BEST THIS0504    11D5  95 E4        	STA	MAXC,X			; STATE0505    0506    11D7  18           LESS	CLC0507    11D8  08           	PHP				; ADD TO0508    11D9  75 E5        	ADC	CC,X			; CAPTURE0509    11DB  95 E5        	STA	CC,X			; COUNTS0510    11DD  28           	PLP0511    0512    11DE  E0 04        NOCAP	CPX	#$040513    11E0  F0 03        	BEQ	ON40514    11E2  30 31        	BMI	TREE			; (=00 ONLY)0515    11E4  60           XRT	RTS0516    0517    ;	GENERATE FURTHER MOVES FOR COUNT0518    ;	AND ANALYSIS0519    0520    11E5  A5 E8        ON4	LDA	XMAXC			; SAVE ACTUAL0521    11E7  85 DD        	STA	WCAP0			; CAPTURE0522    11E9  A9 00        	LDA	#$00			; STATE=00523    11EB  85 B5        	STA	STATE0524    11ED  20 AD 13     	JSR	MOVE			; GENERATE0525    11F0  20 13 13     	JSR	REV			; IMMEDIATE0526    11F3  20 61 12     	JSR	GNMZ			; REPLY MOVES0527    11F6  20 13 13     	JSR	REV0528    0529    11F9  A9 08        	LDA	#$08			; STATE=80530    11FB  85 B5        	STA	STATE			; GENERATE0531    11FD  20 6A 12     	JSR	GNM			; CONTINUATION0532    1200  20 93 13     	JSR	UMOVE			; MOVES0533    0534    1203  4C 85 14     	JMP	STRAT			; FINAL EVALUATION0535    NOCNT0536    1206  E0 F9        	CPX	#$F90537    1208  D0 0B        	BNE	TREE0538    0539    ;	DETERMINE IF THE KING CAN BE0540    ;	TAKEN, USED BY CHKCHK0541    0542    120A  A5 60        	LDA	BK			; IS KING0543    120C  C5 B1        	CMP	SQUARE			; IN CHECK?0544    120E  D0 04        	BNE	RETJ			; SET INCHEK=00545    1210  A9 00        	LDA	#$00			; IF IT IS0546    1212  85 B4        	STA	INCHEK0547    1214  60           RETJ	RTS0548    0549    ;	IF A PIECE HAS BEEN CAPTURED BY0550    ;	A TRIAL MOVE, GENERATE REPLIES &0551    ;	EVALUATE THE EXCHANGE GAIN/LOSS0552    0553    TREE0554    1215  50 FD        	BVC	RETJ			; NO CAP0555    1217  A0 07        	LDY	#$07			; (PIECES)0556    1219  A5 B1        	LDA	SQUARE0557    121B  D9 60 00     LOOPX	CMP	BK,Y0558    121E  F0 05        	BEQ	FOUNX0559    1220  88           	DEY	0560    1221  F0 F1        	BEQ	RETJ			; (KING)0561    1223  10 F6        	BPL	LOOPX			; SAVE0562    1225  B9 DF 18     FOUNX	LDA	POINTS,Y		; BEST CAP0563    1228  D5 E2        	CMP	BCAP0,X			; AT THIS0564    122A  90 02        	BCC	NOMAX			; LEVEL0565    122C  95 E2        	STA	BCAP0,X0566    122E  C6 B5        NOMAX	DEC	STATE0567    1230  A9 FB        	LDA	#$FB			; IF STATE=FB0568    1232  C5 B5        	CMP	STATE			; TIME TO TURN0569    1234  F0 03        	BEQ	UPTREE			; AROUND0570    1236  20 87 13     	JSR	GENRM			; GENERATE FURTHER0571    1239  E6 B5        UPTREE	INC	STATE			; CAPTURES0572    123B  60           	RTS0573    0574    ;	THE PLAYER'S MOVE IS INPUT0575    0576    INPUT0577    123C  38           	SEC				; set for subtract0578    123D  E9 30        	SBC	#'0'			; convert.ascii # to binary0579    0580    123F  C9 08        	CMP	#$08			; NOT A LEGAL0581    1241  B0 06        	BCS	ERROR			; SQUARE #0582    0583    1243  20 75 14     	JSR	DISMV0584    1246  20 4F 12     	JSR	DISP2			; put piece into display0585    1249  4C 24 10     ERROR	JMP	GETKEY			; go update move display and wait for next key0586    ;	JMP	CHESS0587    0588    DISP30589    124C  A5 49        	LDA	DIS3			; get position0590    	.byte	$2C			; make next LDA into BIT xxxx0591    124F  A5 4A        DISP2	LDA	DIS2			; get position0592    1251  A2 1F        	LDX	#$1F0593    1253  D5 50        SEARCH	CMP	BOARD,X			; compare with this piece's position0594    ;	LDA	BOARD,X0595    ;	CMP	DIS20596    1255  F0 05        	BEQ	HERE			; DISPLAY0597    1257  CA           	DEX				; PIECE AT0598    1258  10 F9        	BPL	SEARCH			; FROM0599    125A  A2 BB        	LDX	#$BB			; blank square if no matching piece0600    125C  86 4B        HERE	STX	DIS1			; SQUARE0601    125E  86 B0        	STX	PIECE0602    1260  60           	RTS0603    0604    ;	GENERATE ALL MOVES FOR ONE0605    ;	SIDE, CALL JANUS AFTER EACH0606    ;	ONE FOR NEXT STE?0607    0608    GNMZ0609    1261  A2 10        	LDX	#$10			; CLEAR0610    1263  A9 00        GNMX	LDA	#$00			; COUNTERS0611    1265  95 DE        CLEAR	STA	COUNT,X0612    1267  CA           	DEX0613    1268  10 FB        	BPL	CLEAR0614    0615    126A  A9 10        GNM	LDA	#$10			; SET UP0616    126C  85 B0        	STA	PIECE			; PIECE0617    126E  C6 B0        NEWP	DEC	PIECE			; NEW PIECE0618    1270  10 01        	BPL	NEX			; ALL DONE?0619    1272  60           	RTS				; #NAME?0620    0621    1273  20 80 13     NEX	JSR	RESET			; READY0622    1276  A4 B0        	LDY	PIECE			; GET PIECE0623    1278  A2 08        	LDX	#$080624    127A  86 B6        	STX	MOVEN			; COMMON START0625    127C  C0 08        	CPY	#$08			; WHAT IS IT?0626    127E  10 41        	BPL	PAWN			; PAWN0627    1280  C0 06        	CPY	#$060628    1282  10 2E        	BPL	KNIGHT			; KNIGHT0629    1284  C0 04        	CPY	#$040630    1286  10 1F        	BPL	BISHOP			; BISHOP0631    1288  C0 01        	CPY	#$010632    128A  F0 09        	BEQ	QUEEN			; QUEEN0633    128C  10 0E        	BPL	ROOK			; ROOK0634    0635    128E  20 EF 12     KING	JSR	SNGMV			; MUST BE KING!0636    1291  D0 FB        	BNE	KING			; MOVES0637    1293  F0 D9        	BEQ	NEWP			; 8 TO 10638    1295  20 FD 12     QUEEN	JSR	LINE0639    1298  D0 FB        	BNE	QUEEN			; MOVES0640    129A  F0 D2        	BEQ	NEWP			; 8 TO 10641    0642    129C  A2 04        ROOK	LDX	#$040643    129E  86 B6        	STX	MOVEN			; MOVES0644    12A0  20 FD 12     AGNR	JSR	LINE			; 4 TO 10645    12A3  D0 FB        	BNE	AGNR0646    12A5  F0 C7        	BEQ	NEWP0647    0648    12A7  20 FD 12     BISHOP	JSR	LINE0649    12AA  A5 B6        	LDA	MOVEN			; MOVES0650    12AC  C9 04        	CMP	#$04			; 8 TO 50651    12AE  D0 F7        	BNE	BISHOP0652    12B0  F0 BC        	BEQ	NEWP0653    0654    12B2  A2 10        KNIGHT	LDX	#$100655    12B4  86 B6        	STX	MOVEN			; MOVES0656    12B6  20 EF 12     AGNN	JSR	SNGMV			; 16 TO 90657    12B9  A5 B6        	LDA	MOVEN0658    12BB  C9 08        	CMP	#$080659    12BD  D0 F7        	BNE	AGNN0660    12BF  F0 AD        	BEQ	NEWP0661    0662    12C1  A2 06        PAWN	LDX	#$060663    12C3  86 B6        	STX	MOVEN0664    12C5  20 2B 13     P1	JSR	CMOVE			; RIGHT CAP?0665    12C8  50 05        	BVC	P20666    12CA  30 03        	BMI	P20667    12CC  20 A6 11     	JSR	JANUS			; YES0668    12CF  20 80 13     P2	JSR	RESET0669    12D2  C6 B6        	DEC	MOVEN			; LEFT CAP?0670    12D4  A5 B6        	LDA	MOVEN0671    12D6  C9 05        	CMP	#$050672    12D8  F0 EB        	BEQ	P10673    12DA  20 2B 13     P3	JSR	CMOVE			; AHEAD0674    12DD  70 8F        	BVS	NEWP			; ILLGAL0675    12DF  30 8D        	BMI	NEWP0676    12E1  20 A6 11     	JSR	JANUS0677    12E4  A5 B1        	LDA	SQUARE			; GETS TO0678    12E6  29 F0        	AND	#$F0			; 3RD RANK?0679    12E8  C9 20        	CMP	#$200680    12EA  F0 EE        	BEQ	P3			; DO DOUBLE0681    12EC  4C 6E 12     	JMP	NEWP0682    0683    ;	CALCULATE SINGLE STEP MOVES0684    ;	FOR K,N0685    0686    SNGMV0687    12EF  20 2B 13     	JSR	CMOVE			; CALC MOVE0688    12F2  30 03        	BMI	ILL1			; -IF LEGAL0689    12F4  20 A6 11     	JSR	JANUS			; -EVALUATE0690    12F7  20 80 13     ILL1	JSR	RESET0691    12FA  C6 B6        	DEC	MOVEN0692    12FC  60           	RTS0693    0694    ;	CALCULATE ALL MOVES DOWN A0695    ;	STRAIGHT LINE FOR Q,B,R0696    0697    LINE0698    12FD  20 2B 13     	JSR	CMOVE			; CALC MOVE0699    1300  90 02        	BCC	OVL			; NO CHK0700    1302  50 F9        	BVC	LINE			; NOCAP0701    1304  30 07        OVL	BMI	ILL			; RETURN0702    1306  08           	PHP0703    1307  20 A6 11     	JSR	JANUS			; EVALUATE POSN0704    130A  28           	PLP0705    130B  50 F0        	BVC	LINE			; NOT A CAP0706    130D  20 80 13     ILL	JSR	RESET			; LINE STOPPED0707    1310  C6 B6        	DEC	MOVEN			; NEXT DIR0708    1312  60           	RTS0709    0710    ;	EXCHANGE SIDES FOR REPLY0711    ;	ANALYSIS0712    0713    REV0714    1313  A2 0F        	LDX	#$0F0715    1315  38           ETC	SEC0716    1316  B4 60        	LDY	BK,X			; SUBTRACT0717    1318  A9 77        	LDA 	#$77			; POSITION0718    131A  F5 50        	SBC	BOARD,X			; FROM 770719    131C  95 60        	STA	BK,X0720    131E  94 50        	STY	BOARD,X			; AND0721    1320  38           	SEC0722    1321  A9 77        	LDA	#$77			; EXCHANGE0723    1323  F5 50        	SBC 	BOARD,X			; PIECES0724    1325  95 50        	STA	BOARD,X0725    1327  CA           	DEX0726    1328  10 EB        	BPL	ETC0727    132A  60           	RTS0728    0729    ;	CMOVE CALCULATES THE TO SQUARE0730    ;	USING SQUARE AND THE MOVE0731    ;	TABLE	FLAGS SET AS FOLLOWS:0732    ;	N#NAME?	MOVE0733    ;	V#NAME?	(LEGAL UNLESS IN CR)0734    ;	C#NAME?	BECAUSE OF CHECK0735    ;	[MY &THANKS TO JIM BUTTERFIELD0736    ;	WHO WROTE THIS MORE EFFICIENT0737    ;	VERSION OF CMOVE)0738    0739    CMOVE0740    132B  A5 B1        	LDA	SQUARE			; GET SQUARE0741    132D  A6 B6        	LDX	MOVEN			; MOVE POINTER0742    132F  18           	CLC0743    1330  7D CE 18     	ADC	MOVEX,X			; MOVE LIST0744    1333  85 B1        	STA	SQUARE			; NEW POS'N0745    1335  29 88        	AND	#$880746    1337  D0 42        	BNE	ILLGAL			; OFF BOARD0747    1339  A5 B1        	LDA	SQUARE0748    0749    133B  A2 20        	LDX	#$200750    133D  CA           LOOP	DEX				; IS TO0751    133E  30 0E        	BMI	NO			; SQUARE0752    1340  D5 50        	CMP	BOARD,X			; OCCUPIED?0753    1342  D0 F9        	BNE	LOOP0754    0755    1344  E0 10        	CPX	#$10			; BY SELF?0756    1346  30 33        	BMI	ILLGAL0757    0758    1348  A9 7F        	LDA	#$7F			; MUST BE CAP!0759    134A  69 01        	ADC	#$01			; SET V FLAG0760    134C  70 01        	BVS	SPX 			; (JMP)0761    0762    134E  B8           NO	CLV				; NO CAPTURE0763    0764    134F  A5 B5        SPX	LDA	STATE			; SHOULD WE0765    1351  30 24        	BMI	RETL			; DO THE0766    1353  C9 08        	CMP	#$08 			; CHECK CHECK?0767    1355  10 20        	BPL	RETL0768    0769    ;	CHKCHK REVRSES SIDES0770    ;	AND LOOKS FOR A KING0771    ;	CAPTURE TO INDICATE0772    ;	ILLGAL MOVE BECAUSE OF0773    ;	CHECK	SINCE THIS IS0774    ;	TIME CONSUMING, IT IS NOT0775    ;	ALWAYS DONE	0776    0777    1357  48           CHKCHK	PHA				; STATE	#3920778    1358  08           	PHP0779    1359  A9 F9        	LDA	#$F90780    135B  85 B5        	STA	STATE			; GENERATE0781    135D  85 B4        	STA	INCHEK			; ALL REPLY0782    135F  20 AD 13     	JSR	MOVE			; MOVES TO0783    1362  20 13 13     	JSR	REV			; SEE IF KING0784    1365  20 6A 12     	JSR	GNM			; IS IN0785    1368  20 90 13     	JSR	RUM			; CHECK0786    136B  28           	PLP0787    136C  68           	PLA0788    136D  85 B5        	STA	STATE0789    136F  A5 B4        	LDA	INCHEK0790    1371  30 04        	BMI	RETL			; NO - SAFE0791    1373  38           	SEC				; YES - IN CHK0792    1374  A9 FF        	LDA	#$FF0793    1376  60           	RTS0794    0795    1377  18           RETL	CLC				; LEGAL0796    1378  A9 00        	LDA	#$00			; RETURN0797    137A  60           	RTS0798    0799    137B  A9 FF        ILLGAL	LDA	#$FF0800    137D  18           	CLC				; ILLGAL0801    137E  B8           	CLV				; RETURN0802    137F  60           	RTS0803    0804    ;	REPLACE PIECE ON CORRECT SQUARE0805    0806    RESET0807    1380  A6 B0        	LDX	PIECE			; GET LOGAT0808    1382  B5 50        	LDA	BOARD,X			; FOR PIECE0809    1384  85 B1        	STA	SQUARE			; FROM BOARD0810    1386  60           	RTS0811    0812    GENRM0813    1387  20 AD 13     	JSR	MOVE			; MAKE MOVE0814    138A  20 13 13     GENR2	JSR	REV			; REVRSE BOARD0815    138D  20 6A 12     	JSR	GNM			; GENERATE MOVES0816    1390  20 13 13     RUM	JSR	REV			; REVRSE BACK0817    0818    ;	ROUTINE TO UNMAKE A MOVE MADE BY0819    ;	MOVE0820    0821    1393  BA           UMOVE	TSX				; UNMAKE MOVE0822    1394  86 B3        	STX	SP10823    1396  A6 B2        	LDX	SP2			; EXCHANGE0824    1398  9A           	TXS				; STACKS0825    1399  68           	PLA				; MOVEN0826    139A  85 B6        	STA	MOVEN0827    139C  68           	PLA				; CAPTURED0828    139D  85 B0        	STA	PIECE			; PIECE0829    139F  AA           	TAX0830    13A0  68           	PLA				; FROM SQUARE0831    13A1  95 50        	STA	BOARD,X0832    13A3  68           	PLA				; PIECE0833    13A4  AA           	TAX0834    13A5  68           	PLA				; TO SOUARE0835    13A6  85 B1        	STA	SQUARE0836    13A8  95 50        	STA	BOARD,X0837    13AA  4C D2 13     	JMP	STRV0838    0839    ;	THIS ROUTINE MOVES PIECE0840    ;	TO SQUARE, PARAMETERS0841    ;	ARE SAVED IN A STACK TO UNMAKE0842    ;	THE MOVE LATER0843    0844    MOVE0845    13AD  BA           	TSX	0846    13AE  86 B3        	STX	SP1			; SWITCH0847    13B0  A6 B2        	LDX	SP2			; STACKS0848    13B2  9A           	TXS	0849    13B3  A5 B1        	LDA	SQUARE0850    13B5  48           	PHA				; TO SQUARE0851    13B6  A8           	TAY	0852    13B7  A2 1F        	LDX	#$1F0853    13B9  D5 50        CHECK	CMP	BOARD,X			; CHECK FOR0854    13BB  F0 03        	BEQ	TAKE			; CAPTURE0855    13BD  CA           	DEX	0856    13BE  10 F9        	BPL	CHECK0857    13C0  A9 CC        TAKE	LDA	#$CC0858    13C2  95 50        	STA	BOARD,X0859    13C4  8A           	TXA				; CAPTURED0860    13C5  48           	PHA				; PIECE0861    13C6  A6 B0        	LDX	PIECE0862    13C8  B5 50        	LDA	BOARD,X0863    13CA  94 50        	STY	BOARD,X			; FROM0864    13CC  48           	PHA				; SQUARE0865    13CD  8A           	TXA0866    13CE  48           	PHA				; PIECE0867    13CF  A5 B6        	LDA	MOVEN0868    13D1  48           	PHA				; MOVEN0869    13D2  BA           STRV	TSX0870    13D3  86 B2        	STX	SP2			; SWITCH0871    13D5  A6 B3        	LDX	SP1			; STACKS0872    13D7  9A           	TXS				; BACK0873    13D8  60           	RTS0874    0875    ;	CONTINUATION OF SUB STRAT0876    ;	-CHECKS FOR CHECK OR CHECKMATE0877    ;	AND ASSIGNS VALUE TO MOVE0878    0879    CKMATE0880    13D9  A4 E4        	LDY	BMAXC			; CAN BLK CAP0881    13DB  EC DF 18     	CPX	POINTS			; MY KING?0882    13DE  D0 04        	BNE	NOCHEK0883    13E0  A9 00        	LDA	#$00			; GULP!0884    13E2  F0 0A        	BEQ	RETV			; DUMB MOVE!0885    0886    13E4  A6 E3        NOCHEK	LDX	BMOB			; IS BLACK0887    13E6  D0 06        	BNE	RETV			; UNABLE TO0888    13E8  A6 EE        	LDX	WMAXP			; MOVE AND0889    13EA  D0 02        	BNE	RETV			; KING IN CH?0890    13EC  A9 FF        	LDA	#$FF			; YES! MATE0891    0892    13EE  A2 04        RETV	LDX	#$04			; RESTORE0893    13F0  86 B5        	STX	STATE			; STATE=40894    0895    ;	THE VALUE OF THE MOVE (IN ACCU)0896    ;	IS COMPARED TO THE BEST MOVE AND0897    ;	REPLACES IT IF IT IS BETTER0898    0899    13F2  C5 4A        PUSH	CMP	BESTV			; IS THIS BEST0900    13F4  90 0C        	BCC	RETP			; MOVE SO FAR?0901    13F6  F0 0A        	BEQ	RETP0902    13F8  85 4A        	STA	BESTV			; YES!0903    13FA  A5 B0        	LDA	PIECE			; SAVE IT0904    13FC  85 4B        	STA	BESTP0905    13FE  A5 B1        	LDA	SQUARE0906    1400  85 49        	STA	BESTM			; FLASH DISPLAY0907    1402  A5 4C        RETP	LDA	PROMPT			; get PROMPT character0908    1404  49 1F        	EOR	#$1F			; toggle between [OUTSP] and '?"0909    1406  85 4C        	STA	PROMPT			; save it back			0910    	;JMP	UPDDSP		; update PROMPT & display	0911    1408  4C 09 15     	JMP	DSPDOT			; update PROMPT & display0912    0913    ;	MAIN PROGRAM TO PLAY CHESS0914    ;	PLAY FROM OPENING OR THINK0915    0916    ; ARE WE STILL INSIDE A CANNED OPENING?0917    OPENOK	0918    140B  A4 DC        	LDY	OMOVE0919    140D  A5 49        	LDA	DIS3			; -YES WAS0920    140F  D1 43        	CMP	(POPENL),Y		; OPPONENT'S0921    1411  60           .NO	RTS0922    0923    ; MOVE DIDNT MATCH EXPECTED MOVE FOR OPENING0924    ; SO TEST AGAINST ALL OUR KNOWN OPENINGS0925    CHKOPN0926    1412  A0 0A        	LDY 	#NUMOPN			; 10 OPENINGS TO CHECK0927    1414  88           .LOOP	DEY0928    1415  98           	TYA0929    1416  48           	PHA				; CRAPPY CODE...0930    1417  20 46 17     	JSR 	SETOPN0931    141A  20 0B 14     	JSR 	OPENOK0932    141D  F0 07        	BEQ 	GO			; TRY AGAIN WITH MATCHING OPENING0933    141F  68           	PLA0934    1420  A8           	TAY0935    1421  88           	DEY		0936    1422  D0 F0        	BNE 	.LOOP0937    1424  F0 18        	BEQ 	END			; CHECKED ALL0938    0939    GO0940    1426  A4 DC        	LDY	OMOVE			; OPENING?0941    1428  30 18        	BMI	NOOPEN			; -NO	*ADD CHANGE FROM BPL0942    142A  20 0B 14     	JSR	OPENOK0943    142D  D0 E3        	BNE	CHKOPN			; MOVE OK?0944    142F  88           	DEY0945    1430  B1 43        	LDA	(POPENL),Y		; GET NEXT0946    1432  85 4B        	STA	DIS1			; CANNED0947    1434  88           	DEY				; OPENING MOVE0948    1435  B1 43        	LDA	(POPENL),Y0949    1437  85 49        	STA	DIS3			; DISPLAY IT0950    1439  88           	DEY0951    143A  84 DC        	STY	OMOVE			; MOVE IT0952    143C  D0 1C        	BNE	MV2			; (JMP)0953    0954    143E  A9 FF        END	LDA	#$FF			; *ADD - STOP CANNED MOVES0955    1440  85 DC        	STA	OMOVE			; FLAG OPENING0956    1442  A2 0C        NOOPEN	LDX	#$0C			; FINISHED0957    1444  86 B5        	STX	STATE			; STATE=C0958    1446  86 4A        	STX	BESTV			; CLEAR BESTV0959    1448  A2 14        	LDX	#$14			; GENERATE P0960    144A  20 63 12     	JSR	GNMX			; MOVES0961    0962    144D  A2 04        	LDX	#$04			; STATE=40963    144F  86 B5        	STX	STATE			; GENERATE AND0964    1451  20 61 12     	JSR	GNMZ			; TEST AVAILABLE0965    ;0966    ;	MOVES0967    0968    1454  A6 4A        	LDX	BESTV			; GET BEST MOVE0969    1456  E0 0F        	CPX	#$0F			; IF NONE0970    1458  90 18        	BCC	MATE			; OH OH!0971    0972    145A  A6 4B        MV2	LDX	BESTP			; MOVE0973    145C  B5 50        	LDA	BOARD,X			; THE0974    145E  85 4A        	STA	BESTV			; BEST0975    1460  86 B0        	STX	PIECE			; MOVE0976    1462  A5 49        	LDA	BESTM0977    1464  85 B1        	STA	SQUARE			; AND DISPLAY0978    1466  20 CC 15     	JSR	PRTAKE			; PRINT MESSAGE IF CAPTURE0979    1469  20 AD 13     	JSR	MOVE			; IT0980    0981    146C  20 4C 12     	JSR	DISP3			; piece into display0982    0983    146F  4C 15 10     	JMP	CHESS0984    0985    1472  A9 FF        MATE	LDA	#$FF			; RESIGN0986    1474  60           	RTS				; OR STALEMATE0987    0988    ;	SUBROUTINE TO ENTER THE0989    ;	PLAYER'S MOVE0990    0991    DISMV0992    1475  A2 04        	LDX	#$04			; ROTATE0993    1477  06 49        DROL	ASL	DIS3			; KEY0994    1479  26 4A        	ROL	DIS2			; INTO0995    147B  CA           	DEX				; DISPLAY0996    147C  D0 F9        	BNE	DROL			;0997    0998    147E  05 49        	ORA	DIS30999    1480  85 49        	STA	DIS31000    1482  85 B1        	STA	SQUARE1001    1484  60           	RTS1002    1003    ;	THE FOLLOWING SUBROUTINE ASSIGNS1004    ;	A VALUE TO THE MOVE UNDER1005    ;	CONSIDERATION AND RETURNS IT IN1006    ;	THE ACCUMULATOR1007    1008    1009    STRAT1010    1485  18           	CLC1011    1486  A9 80        	LDA	#$801012    1488  65 EB        	ADC	WMOB			; PARAMETERS1013    148A  65 EC        	ADC	WMAXC			; WITH WHEIGHT1014    148C  65 ED        	ADC	WCC			; OF O251015    148E  65 E1        	ADC	WCAP11016    1490  65 DF        	ADC	WCAP21017    1492  38           	SEC1018    1493  E5 F0        	SBC	PMAXC1019    1495  E5 F1        	SBC	PCC1020    1497  E5 E2        	SBC	BCAP01021    1499  E5 E0        	SBC	BCAP11022    149B  E5 DE        	SBC	BCAP21023    149D  E5 EF        	SBC	PMOB1024    149F  E5 E3        	SBC	BMOB1025    14A1  B0 02        	BCS	POS			; UNDERFLOW1026    14A3  A9 00        	LDA	#$00			; PREVENTION1027    14A5  4A           POS	LSR1028    14A6  18           	CLC				; **************1029    14A7  69 40        	ADC	#$401030    14A9  65 EC        	ADC	WMAXC			; PARAMETERS1031    14AB  65 ED        	ADC	WCC			; WITH WEIGHT1032    14AD  38           	SEC				; OF 051033    14AE  E5 E4        	SBC	BMAXC1034    14B0  4A           	LSR				; **************1035    14B1  18           	CLC1036    14B2  69 90        	ADC	#$901037    14B4  65 DD        	ADC	WCAP0			; PARAMETERS1038    14B6  65 DD        	ADC	WCAP0			; WITH WEIGHT1039    14B8  65 DD        	ADC	WCAP0			; OF 101040    14BA  65 DD        	ADC	WCAP01041    14BC  65 E1        	ADC	WCAP11042    14BE  38           	SEC				; [UNDER OR OVER-1043    14BF  E5 E4        	SBC	BMAXC			; FLOW MAY OCCUR1044    14C1  E5 E4        	SBC	BMAXC			; FROM THIS1045    14C3  E5 E5        	SBC	XBCC			; SECTION]1046    14C5  E5 E5        	SBC	XBCC1047    14C7  E5 E0        	SBC	BCAP11048    14C9  A6 B1        	LDX	SQUARE			; ***************1049    14CB  E0 33        	CPX	#$331050    14CD  F0 16        	BEQ	POSN			; POSITION1051    14CF  E0 34        	CPX	#$34			; BONUS FOR1052    14D1  F0 12        	BEQ	POSN			; MOVE TO1053    14D3  E0 22        	CPX	#$22			; CENTRE1054    14D5  F0 0E        	BEQ	POSN			; OR1055    14D7  E0 25        	CPX	#$25			; OUT OF1056    14D9  F0 0A        	BEQ	POSN			; BACK RANK1057    14DB  A6 B0        	LDX	PIECE1058    14DD  F0 09        	BEQ	NOPOSN1059    14DF  B4 50        	LDY	BOARD,X1060    14E1  C0 10        	CPY	#$101061    14E3  10 03        	BPL	NOPOSN1062    14E5  18           POSN	CLC1063    14E6  69 02        	ADC	#$021064    14E8  4C D9 13     NOPOSN	JMP	CKMATE			; CONTINUE1065    1066    ; most new code from here on1067    1068    ; update move display, do PROMPT, piece, 'FROM' and 'TO' squares1069    1070    UPDDSP1071    14EB  20 F4 18     	JSR 	CRLF1072    14EE  A5 4C        	LDA	PROMPT			; PROMPT1073    14F0  20 EF FF     	JSR	OUTCH		;.byte out to display1074    14F3  20 EF 18     	JSR	OUTSP			; [OUTSP] out to display1075    1076    14F6  20 F0 15     	JSR	DSPPCE		; display piece (from.byte in DIS1)1077    1078    14F9  20 EF 18     	JSR	OUTSP			; [OUTSP] out to display1079    14FC  A5 4A        	LDA	DIS2			; 2nd display.byte1080    14FE  20 C7 15     	JSR	PSQR			; Print square1081    1501  20 EF 18     	JSR	OUTSP			; [OUTSP] out to display1082    1504  A5 49        	LDA	DIS3			; 3rd display.byte1083    1506  4C C7 15     	JMP	PSQR			; Print square1084    1085    ; draw board on an.ascii character display1086    ; the display in the simulator has cursor1087    ; positioning. Other displays may use escape1088    ; codes to the same ends.1089    1090    DSPDOT1091    1509  A9 2E        	LDA #'.'1092    150B  4C EF FF     	JMP OUTCH1093    1094    DRWBRD1095    150E  20 F4 18     	JSR 	CRLF1096    1511  20 A1 15     	JSR	PCOLNM			; print column labels1097    1514  20 7C 15     	JSR	HLINE			; print horizontal line1098    1517  A0 00        	LDY	#$00			; init board location1099    1519  20 C6 15     PNVRT	JSR	PROWNM			; print row number1100    151C  A9 21        PVRT	LDA	#'!'			; print vertical edge1101    151E  20 EF FF     	JSR	OUTCH		;.byte out to display1102    1103    1521  A2 1F        	LDX	#$1F			; for each piece1104    1523  98           	TYA				; copy square #1105    1524  D5 50        PPCE	CMP	BOARD,X			; this piece in this square?1106    1526  F0 35        	BEQ	PCEOUT		; if so print the piece's color and type1107    1108    1528  CA           	DEX				; else try next piece1109    1529  10 F9        	BPL	PPCE			; if not done then loop1110    1111    152B  98           	TYA				; copy square #1112    152C  0A           	ASL				; shift column LSB into Cb1113    152D  0A           	ASL				;1114    152E  0A           	ASL				;1115    152F  0A           	ASL				;1116    1530  98           	TYA				; copy square # again1117    1531  69 00        	ADC	#$00			; add column LSB1118    1533  4A           	LSR				; result into carry	1119    1534  A9 20        	LDA	#SP			; assume white square1120    1536  90 02        	BCC	ISWHTE 		; branch if white1121    1122    1538  A9 23        	LDA	#'#'			; else make square black1123    153A  20 EF FF     ISWHTE	JSR	OUTCH		;.byte out to display1124    153D  20 EF FF     	JSR	OUTCH		;.byte out to display1125    1540  C8           PNXTC	INY				; next column1126    1541  98           	TYA				; get square #1127    1542  29 08        	AND	#$08			; have we completed the row?1128    1544  F0 D6        	BEQ	PVRT			; if not go do next column1129    1130    1546  A9 21        	LDA	#'!'			; yes, put the right edge on1131    1548  20 EF FF     	JSR	OUTCH		;.byte out to display1132    154B  20 C6 15     	JSR	PROWNM			; print row number1133    154E  20 F4 18     	JSR	CRLF			; print CRLF1134    1551  20 7C 15     	JSR	HLINE			; print horizontal line1135    1554  98           	TYA				; copy square #1136    1555  18           	CLC				; clear for add1137    1556  69 08        	ADC	#$08			; increment to beginning of next row1138    1558  30 47        	BMI	PCOLNM			; done so go finish board1139    1140    155A  A8           	TAY				; else copy new square #1141    155B  10 BC        	BPL	PNVRT		; go do next row1142    1143    ; output piece's color & type1144    1145    155D  A9 57        PCEOUT	LDA	#'W'			; assume white1146    155F  E0 10        	CPX	#$10			; compare with breakpoint (result in Cb)1147    1561  24 4D        	BIT	REVRSE			; test REVRSE.byte1148    1563  F0 04        	BEQ	NOFLIP			; branch if not REVRSE1149    1150    					; else toggle Cb state1151    1565  2A           	ROL				; Cb into D0		1152    1566  49 01        	EOR	#$01			; toggle bit1153    1568  6A           	ROR				; D0 into Cb1154    1569  90 02        NOFLIP	BCC	NOTBLK		; branch if white1155    1156    156B  A9 42        	LDA	#'B'			; else make black1157    156D  20 EF FF     NOTBLK	JSR	OUTCH		;.byte out to display1158    1570  8A           	TXA				; copy piece1159    1571  29 0F        	AND	#$0F			; mask black/white1160    1573  AA           	TAX				; back to index1161    1574  BD 9E 18     	LDA	PPIECE,x		; get current piece 2nd.byte1162    1577  20 EF FF     	JSR	OUTCH		;.byte out to display1163    157A  D0 C4        	BNE	PNXTC		; branch always1164    1165    ; print '  ', line of -'s then [CR]1166    HLINE1167    157C  20 EF 18     	JSR OUTSP1168    157F  20 EF 18     	JSR OUTSP1169    1582  8A           	TXA  		; PRINT '+--+--...--+<CRLF>"1170    1583  48           	PHA1171    1584  A2 08        	LDX #$81172    1586  A9 2B        .LOOP	LDA #'+'1173    1588  20 EF FF     	JSR OUTCH 	1174    158B  A9 2D        	LDA #'-'1175    158D  20 EF FF     	JSR OUTCH1176    1590  20 EF FF     	JSR OUTCH1177    1593  CA           	DEX1178    1594  D0 F0        	BNE .LOOP1179    1596  A9 2B        	LDA #'+'1180    1598  20 EF FF     	JSR OUTCH1181    159B  68           	PLA1182    159C  AA           	TAX1183    159D  20 F4 18     	JSR CRLF1184    15A0  60           	RTS1185    1186    ; print the column labels1187    1188    PCOLNM1189    15A1  20 EF 18     	JSR	OUTSP			; [OUTSP] out to display1190    15A4  20 EF FF     	JSR	OUTCH		;.byte out to display (2nd [OUTSP])1191    15A7  A2 00        	LDX	#$00			; clear index1192    15A9  20 EF 18     PNXTCN	JSR	OUTSP			; [OUTSP] out to display1193    15AC  8A           	TXA				; get column number1194    15AD  20 DC FF     	JSR	HEXOUT			; A out as hex1195    15B0  E8           	INX				; next column1196    15B1  E0 08        	CPX	#$08			; is it done?1197    15B3  D0 F4        	BNE	PNXTCN		; loop if not1198    1199    15B5  4C F4 18     	JMP	CRLF			; else do newline and return1200    1201    ; print (c) message1202    1203    PRNTC1204    15B8  A2 00        	LDX	#$00			; initial 01205    15BA  BD 20 18     PRNTCL	LDA	C,X			; get.byte1206    15BD  30 06        	BMI	PRNTCE		; exit if $FF [EOT]1207    15BF  20 EF FF     	JSR	OUTCH		;.byte out to display1208    15C2  E8           	INX				; increment index1209    15C3  D0 F5        	BNE	PRNTCL		; loop1210    15C5  60           PRNTCE	RTS	1211    1212    PROWNM1213    15C6  98           	TYA				; copy row number1214    15C7  29 77        PSQR	AND 	#$77			; mask unused bits1215    15C9  4C DC FF     	JMP 	HEXOUT1216    	1217    PRTAKE1218    	;STX $111219    15CC  A2 1F        	LDX #$1F			; loop all pieces each piece1220    15CE  D5 50        .LOOP	CMP BOARD,X			; this piece in this square?1221    15D0  F0 04        	BEQ .YES			; if so print the piece's color and type1222    15D2  CA           	DEX				; else try next piece1223    15D3  10 F9        	BPL .LOOP			; if not done then loop1224    15D5  60           	RTS1225    15D6  48           .YES	PHA	1226    15D7  A5 4B        	LDA DIS11227    15D9  48           	PHA1228    15DA  8A           	TXA1229    15DB  85 4B        	STA DIS11230    15DD  20 F4 18     	JSR CRLF1231    15E0  A2 9C        	LDX #$9C;#PCAPT-PNAME		; set pointer1232    15E2  20 FA 15     	JSR DISSTR			; go print it1233    15E5  20 EF 18     	JSR OUTSP1234    15E8  20 F0 15     	JSR DSPPCE1235    15EB  68           	PLA1236    15EC  85 4B        	STA DIS11237    15EE  68           	PLA1238    	;LDX $111239    15EF  60           	RTS1240    1241    ; display piece byte in DIS1 as ascii string1242    1243    DSPPCE1244    15F0  A5 4B        	LDA	DIS1			; get piece for this move1245    15F2  30 13        	BMI	DSPSPC		; branch if not piece1246    1247    15F4  29 0F        	AND	#$0F			; don't care black or white1248    15F6  0A           	ASL				; *21249    15F7  0A           	ASL				; *41250    15F8  0A           	ASL				; *81251    15F9  AA           	TAX				; copy index1252    15FA  A0 08        DISSTR	LDY	#$08			; character count1253    15FC  BD 7C 17     .LOOP	LDA	PNAME,X		; get.byte1254    15FF  20 EF FF     	JSR	OUTCH		; out to display1255    1602  E8           	INX				; increment index1256    1603  88           	DEY				; decrement count1257    1604  D0 F6        	BNE	.LOOP			; loop if not done1258    1259    1606  60           	RTS1260    1261    ; set X for 'special' $CC, $EE and $FF piece codes, else set null1262    1263    DSPSPC1264    1607  C9 CC        	CMP	#$CC			; compare with reset1265    1609  D0 04        	BNE	NOTRST		; branch if not reset1266    1267    160B  A2 80        	LDX	#$80;PRES-PNAME		; set pointer1268    160D  D0 EB        	BNE	DISSTR		; go print it1269    1270    160F  C9 EE        NOTRST	CMP	#$EE			; compare with exchange1271    1611  D0 04        	BNE	NOTEX			; branch if not exchange1272    1273    1613  A2 88        	LDX	#$88;PEXG-PNAME		; set pointer1274    1615  D0 E3        	BNE	DISSTR		; go print it1275    				; else null1276    1617  C9 FF        NOTEX	CMP	#$FF			; compare with check mate1277    1619  D0 04        	BNE	NOTCHK			; branch if not check mate1278    1279    161B  A2 90        	LDX	#$90;PCKM-PNAME		; set pointer1280    161D  D0 DB        	BNE	DISSTR		; go print it1281    1282    					; else null1283    161F  A2 94        NOTCHK	LDX	#$94;PNUL-PNAME		; set pointer1284    1621  D0 D7        	BNE	DISSTR		; go print it1285    1286    ; start up menus1287    ; Menu data1288    1289    SPDMNU	.ascii "SELECT"1290    	.byte $201291    	.ascii "LEVEL:"1292    	.byte $001293    	.byte $001294    	.ascii "0)"1295    	.byte $201296    	.ascii "SUPER"1297    	.ascii "BLITZ"1298    	.byte $001299    	.ascii "1)"1300    	.byte $201301    	.ascii "BLITZ"1302    	.byte $001303    	.ascii "2)"1304    	.byte $201305    	.ascii "NORMAL"1306    	.byte $001307    	.byte $FF1308    	1309    OPNMNU	.byte $001310    	.ascii "SELECT"1311    	.byte $201312    	.ascii "OPENING:"1313    	.byte $201314    	.ascii "COMP"1315    	.byte $201316    	.ascii "PLAYS"1317    	.byte $001318    	.byte $001319    	.ascii "FRENCH"1320    	.byte $201321    	.ascii "DEFENCE:"1322    	.byte $201323    	.ascii "0)"1324    	.byte $201325    	.ascii "W"1326    	.byte $201327    	.ascii "1)"1328    	.byte $201329    	.ascii "B"1330    	.byte $001331    	.ascii "GIUOCO"1332    	.byte $201333    	.ascii "PIANO:"1334    	.byte $201335    	.byte $201336    	.byte $201337    	.ascii "2)"1338    	.byte $201339    	.ascii "W"1340    	.byte $201341    	.ascii "3)"1342    	.byte $201343    	.ascii "B"1344    	.byte $001345    	.ascii "RUY"1346    	.byte $201347    	.ascii "LOPEZ:"1348    	.byte $201349    	.byte $201350    	.byte $201351    	.byte $201352    	.byte $201353    	.byte $201354    	.ascii "4)"1355    	.byte $201356    	.ascii "W"1357    	.byte $201358    	.ascii "5)"1359    	.byte $201360    	.ascii "B"1361    	.byte $001362    	.ascii "QUEEN"1363    	.byte $271364    	.ascii "S"1365    	.byte $201366    	.ascii "INDIAN:"1367    	.byte $201368    	.ascii "6)"1369    	.byte $201370    	.ascii "W"1371    	.byte $201372    	.ascii "7)"1373    	.byte $201374    	.ascii "B"1375    	.byte $001376    	.ascii "FOUR"1377    	.byte $201378    	.ascii "KNIGHTS:"1379    	.byte $201380    	.byte $201381    	.byte $201382    	.ascii "8)"1383    	.byte $201384    	.ascii "W"1385    	.byte $201386    	.ascii "9)"1387    	.byte $201388    	.ascii "B"1389    	.byte $001390    	.byte $FF1391    1392    16F4  A9 23        INIT	LDA #<SPDMNU1393    16F6  85 41        	STA MENUL1394    16F8  A9 16        	LDA #>SPDMNU1395    16FA  85 42        	STA MENUH1396    	1397    16FC  20 5F 17     	JSR SHOW	; show the menu1398    16FF  20 FE 18     	JSR GETCH	; get the input1399    1702  20 EF FF     	JSR OUTCH1400    	1401    1705  38           	SEC1402    1706  E9 30        	SBC #'0'	; subtract.ascii "1' to get offfset1403    1708  AA           	TAX1404    1709  D0 09        	BNE .11405    170B  8E 54 13     	STX SPX+5	; store 01406    170E  CA           	DEX1407    170F  8E 31 12     	STX NOMAX+3	; store FF 1408    1712  D0 1A        	BNE .OPEN	; always branches1409    	1410    1714  CA           .1	DEX1411    1715  D0 0A        	BNE .21412    1717  8E 54 13     	STX SPX+5	; store 01413    171A  A2 FB        	LDX #$FB1414    171C  8E 31 12     	STX NOMAX+3	; store FF 1415    171F  D0 0D        	BNE .OPEN	; always branches1416    	1417    1721  CA           .2	DEX1418    1722  D0 D0        	BNE INIT	; invalid entry1419    1724  A2 08        	LDX #$81420    1726  8E 54 13     	STX SPX+5	; store 01421    1729  A2 FB        	LDX #$FB1422    172B  8E 31 12     	STX NOMAX+3	; store FF 1423    	1424    172E  A9 54        .OPEN	LDA #<OPNMNU1425    1730  85 41        	STA MENUL1426    1732  A9 16        	LDA #>OPNMNU1427    1734  85 42        	STA MENUH1428    1429    1736  20 5F 17     	JSR SHOW	; show the menu1430    1739  20 FE 18     	JSR GETCH	; get the input1431    173C  20 EF FF     	JSR OUTCH1432    	1433    173F  38           	SEC1434    1740  E9 30        	SBC #'0'	; subtract.ascii "1' to get offfset1435    1742  C5 40        	CMP MNUCNT	; Are we in range?1436    1744  B0 E8        	BCS .OPEN	; Too large1437    	1438    1746  85 4E        SETOPN	STA COMPW 1439    1748  AA           	TAX	1440    1749  E8           	INX1441    174A  A9 10        	LDA #>OPENGS1442    174C  85 44        	STA POPENH1443    174E  A9 8E        	LDA #<OPENGS1444    	1445    1750  CA           .LOOP	DEX1446    1751  F0 09        	BEQ .RET1447    1753  18           	CLC1448    1754  69 1C        	ADC #OPENSZ1449    1756  90 F8        	BCC .LOOP1450    1758  E6 44        	INC POPENH1451    175A  D0 F4        	BNE .LOOP	; always branches1452    175C  85 43        .RET	STA POPENL1453    175E  60           	RTS1454    	1455    175F  20 F4 18     SHOW	JSR CRLF1456    1762  A0 FF        	LDY #$FF	; data1457    1764  C8           .NEXT	INY1458    1765  B1 41        	LDA (MENUL),Y1459    1767  D0 06        	BNE .NOTEOL1460    1769  20 F4 18     	JSR CRLF1461    176C  4C 64 17     	JMP .NEXT1462    176F  C9 FF        .NOTEOL	CMP #$FF1463    1771  F0 06        	BEQ .DONE1464    1773  20 EF FF     	JSR OUTCH1465    1776  4C 64 17     	JMP .NEXT1466    1779  84 40        .DONE	STY MNUCNT1467    177B  60           	RTS		1468    	1469    1470    ; text descriptions for the S in DIS11471    1472    PNAME .ascii "KING"1473     .byte SP1474     .byte SP1475     .byte SP1476     .byte SP1477     1478     .ascii "QUEEN"1479     .byte SP1480     .byte SP1481     .byte SP1482     1483     .ascii "K"1484     .byte SP1485     .ascii "ROOK"1486     .byte SP1487     .byte SP1488     1489     .ascii "Q"1490     .byte SP1491     .ascii "ROOK"1492     .byte SP1493     .byte SP1494     1495     .ascii "K"1496     .byte SP1497     .ascii "BISHOP"1498     1499     .ascii "Q"1500     .byte SP1501     .ascii "BISHOP"1502     1503     .ascii "K"1504     .byte SP1505     .ascii "KNIGHT"1506     1507     .ascii "Q"1508     .byte SP1509     .ascii "KNIGHT"1510     1511     .ascii "K"1512     .byte SP1513     .ascii "R"1514     .byte SP1515     .ascii "PAWN"1516     1517     .ascii "Q"1518     .byte SP1519     .ascii "R"1520     .byte SP1521     .ascii "PAWN"1522     1523     .ascii "K"1524     .byte SP1525     .ascii "N"1526     .byte SP1527     .ascii "PAWN"1528     1529     .ascii "Q"1530     .byte SP1531     .ascii "N"1532     .byte SP1533     .ascii "PAWN"1534     1535     .ascii "K"1536     .byte SP1537     .ascii "B"1538     .byte SP1539     .ascii "PAWN"1540     1541     .ascii "Q"1542     .byte SP1543     .ascii "B"1544     .byte SP1545     .ascii "PAWN"1546     1547     .ascii "Q"1548     .byte SP1549     .ascii "PAWN"1550     .byte SP1551     .byte SP1552     1553     .ascii "K"1554     .byte SP1555     .ascii "PAWN"1556     .byte SP1557     .byte SP1558     1559    PRES  .ascii "RESET"1560     .byte SP1561     .byte SP1562     .byte SP1563     1564    PEXG .ascii "EXCHANGE"1565    1566    PCKM .ascii "MATE"1567    1568    PNUL .byte SP1569     .byte SP1570     .byte SP1571     .byte SP1572     .byte SP1573     .byte SP1574     .byte SP1575     .byte SP1576     1577    PCAPT .ascii "CAPTURES"1578    1579    ; copyright banner1580    1581    1582    ; copyright banner1583    1584    C1585    	.if APPLE11586    	.byte	" +--------------------+",CR,LF,$001587    	.byte	"!     MicroChess     !",CR,LF,$001588    	.byte	"! (c) Peter Jennings !",CR,LF,$001589    	.byte	"!  peterj@benlo.com  !",CR,LF,$001590    	.byte	"+--------------------+",CR,LF,$FF1591    	.endif1592    1593    ; piece character table1594    1595    PPIECE .ascii "KQRRBBNN"1596     .ascii "PPPPPPPP"1597    1598    ; initial positions1599    1600    SETW .byte $031601     .byte $041602     .byte $001603     .byte $071604     .byte $021605     .byte $051606     .byte $011607     .byte $061608     .byte $101609     .byte $171610     .byte $111611     .byte $161612     .byte $121613     .byte $151614     .byte $141615     .byte $131616     .byte $731617     .byte $741618     .byte $701619     .byte $771620     .byte $721621     .byte $751622     .byte $711623     .byte $761624     .byte $601625     .byte $671626     .byte $611627     .byte $661628     .byte $621629     .byte $651630     .byte $641631     .byte $631632    1633    MOVEX .byte $001634     .byte $F01635     .byte $FF1636     .byte $011637     .byte $101638     .byte $111639     .byte $0F1640     .byte $EF1641     .byte $F11642     .byte $DF1643     .byte $E11644     .byte $EE1645     .byte $F21646     .byte $121647     .byte $0E1648     .byte $1F1649     .byte $211650    1651    POINTS .byte $0B1652     .byte $0A1653     .byte $061654     .byte $061655     .byte $041656     .byte $041657     .byte $041658     .byte $041659     .byte $021660     .byte $021661     .byte $021662     .byte $021663     .byte $021664     .byte $021665     .byte $021666     .byte $021667    1668    1669    OUTSP	1670    18EF  A9 20        	LDA #SP1671    18F1  4C EF FF     	JMP OUTCH1672    	1673    CRLF			; Go to a new line.1674    18F4  A9 0D        	LDA #CR		; "CR"1675    	.if APPLE11676    18F6  20 EF FF     	JSR OUTCH1677    18F9  A9 0A        	LDA #LF		; "LF" - is this needed for the Apple 1?1678    18FB  4C EF FF     	JMP OUTCH1679    	.endif1680    1681    GETCH   		; Get a character from the keyboard.1682    18FE  AD 04 E0     	LDA KBDRDY1683    	.if APPLE11684    1901  F0 FB        	BEQ GETCH1685    	.endif1686    1903  60           	RTS	1687    	1688    	.if APPLE11689      E000             IOMEM	=$E0001690      E001             PUTCH	=IOMEM+11691      E004             KBD	=IOMEM+41692      E004             KBDRDY  =IOMEM+41693    FFDC               	.ORG $FFDC1694    FFDC  48           HEXOUT	PHA 		; Print 1 hex byte. 1695    FFDD  4A           	LSR1696    FFDE  4A           	LSR 1697    FFDF  4A           	LSR1698    FFE0  4A           	LSR 1699    FFE1  20 E5 FF     	JSR PRHEX1700    FFE4  68           	PLA 1701    FFE5  29 0F        PRHEX	AND #$0F	; Print 1 hex digit1702    FFE7  09 30        	ORA #$301703    FFE9  C9 3A        	CMP #$3A1704    FFEB  90 02        	BCC OUTCH1705    FFED  69 06        	ADC #$061706    FFEF  8D 01 E0     OUTCH	STA PUTCH1707    FFF2  60           	RTS  1708    	.endif
1709    